{"version":3,"file":"static/js/149.7e02bcef.chunk.js","mappings":"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","sources":["api/moviesAPI.js","components/MoviesList/MoviesList.jsx","components/SearchForm/SearchForm.jsx","pages/Movies.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'e3f9ac8b4c25ea958657e460a35663f5';\nconst IMAGES_BASE_URL = \"https://image.tmdb.org/t/p/w342\";\n\n\n\nconst getTrendingMovies = async () => {\n    const url = `${BASE_URL}trending/movie/day?api_key=${API_KEY}`;\n    const response = await axios.get(url);\n    return response;\n};\n\nconst getMoviesByName = async (query) => {\n    const url = `${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&query=${query}&include_adult=false`;\n    const response = await axios.get(url);\n    return response;\n};\n\nconst getMovieById = async (id) => {\n    const url = `${BASE_URL}movie/${id}?api_key=${API_KEY}&language=en-US`;\n    const response = await axios.get(url);\n    return response;\n};\n\nconst getMovieCast = async (id) => {\n    const url = `${BASE_URL}movie/${id}/credits?api_key=${API_KEY}&language=en-US`;\n    const response = await axios.get(url);\n    return response;\n};\n\nconst getMovieReviews = async (id) => {\n    const url = `${BASE_URL}movie/${id}/reviews?api_key=${API_KEY}&language=en-US`;\n    const response = await axios.get(url);\n    return response;\n};\n\n\n\nexport { getTrendingMovies, getMoviesByName, getMovieById, getMovieCast, getMovieReviews, IMAGES_BASE_URL };  ","import { Link } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\n\n\nconst MoviesList = ({ movies, state }) => {\n    \n    return (\n        <ul>\n            {movies.map(({id, title}) => {\n                return <li key={id}>\n                    <Link to={`/movies/${id}`} state={state} >{title}</Link>\n                </li>;\n            })}\n        </ul>\n    )\n};\n\nMoviesList.propTypes = {\n    movies: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        title: PropTypes.string.isRequired\n    })),\n    state: PropTypes.object.isRequired\n}\n\nexport default MoviesList;\n","import { useState } from \"react\";\nimport PropTypes from 'prop-types';\n\n\nexport default function SearchForm({ onSubmit }) {\n    const [search, setSearch] = useState(\"\");\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        onSubmit(search);\n        setSearch(\"\");\n    };\n\n    const handleInputChange = (event) => {\n        setSearch(event.target.value);\n    };\n\n    return ( \n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                value={search}\n                onChange={handleInputChange}    \n                autoComplete=\"off\"\n                autoFocus\n                placeholder=\"Search movie\" />\n            <button type=\"submit\">Search</button>\n        </form>\n    )\n};\n\nSearchForm.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n};\n","import { getMoviesByName } from \"api/moviesAPI\";\nimport { useState, useEffect } from \"react\";\nimport { useLocation, useSearchParams } from \"react-router-dom\";\nimport SearchForm from \"components/SearchForm/SearchForm\";\nimport MoviesList from \"components/MoviesList/MoviesList\";\n\nconst Movies = () => {\n    const [movies, setMovies] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [searchParams, setSearchParams] = useSearchParams();\n    const query = searchParams.get('query') ?? \"\";\n    const location = useLocation();\n    \n\n    const onSubmit = (searchQuery) => {\n        if (searchQuery === \"\") {\n            window.alert(\"Please, enter movie\");\n            return;\n        }\n        setSearchParams({ query: searchQuery });\n        setMovies([]);\n    };\n\n    useEffect(() => {\n        \n        if (query === \"\") {\n            return;\n        };\n\n        const searchMovies = () => {\n            setIsLoading(true);\n            setError(null);\n\n            getMoviesByName(query)\n                .then(({ data }) => {\n                    if (data.results.length === 0) {\n                        window.alert(\"We hadn't find any movie, please, try again\");\n                        return;\n                    }\n                    setMovies(data.results);\n                })\n                .catch(newError => {\n                    setError(newError.message);\n                })\n                .finally(setIsLoading(false));\n        };\n\n        searchMovies();\n    }, [query]);\n    \n    \n\n    return (\n        <main>\n            <SearchForm onSubmit={onSubmit} />\n            {isLoading && <p>Loading...</p>}\n            {error && <p>Something go wrong, try again please</p>}\n            {movies.length > 0 && <MoviesList movies={movies} state={{ from: location}} />}\n        </main>\n        \n    )\n\n};\n\nexport default Movies;"],"names":["BASE_URL","API_KEY","IMAGES_BASE_URL","getTrendingMovies","url","axios","response","getMoviesByName","query","getMovieById","id","getMovieCast","getMovieReviews","movies","state","map","title","to","SearchForm","onSubmit","useState","search","setSearch","event","preventDefault","type","value","onChange","target","autoComplete","autoFocus","placeholder","setMovies","isLoading","setIsLoading","error","setError","useSearchParams","searchParams","setSearchParams","get","location","useLocation","useEffect","then","data","results","length","window","alert","catch","newError","message","finally","searchQuery","MoviesList","from"],"sourceRoot":""}