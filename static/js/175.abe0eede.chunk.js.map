{"version":3,"file":"static/js/175.abe0eede.chunk.js","mappings":"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","sources":["api/moviesAPI.js","components/MovieDetails/MovieDetails.styled.jsx","components/MovieDetails/MovieDetails.jsx","pages/SingleMoviePage.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'e3f9ac8b4c25ea958657e460a35663f5';\nconst IMAGES_BASE_URL = \"https://image.tmdb.org/t/p/w342\";\n\n\n\nconst getTrendingMovies = async () => {\n    const url = `${BASE_URL}trending/movie/day?api_key=${API_KEY}`;\n    const response = await axios.get(url);\n    return response;\n};\n\nconst getMoviesByName = async (query) => {\n    const url = `${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&query=${query}&include_adult=false`;\n    const response = await axios.get(url);\n    return response;\n};\n\nconst getMovieById = async (id) => {\n    const url = `${BASE_URL}movie/${id}?api_key=${API_KEY}&language=en-US`;\n    const response = await axios.get(url);\n    return response;\n};\n\nconst getMovieCast = async (id) => {\n    const url = `${BASE_URL}movie/${id}/credits?api_key=${API_KEY}&language=en-US`;\n    const response = await axios.get(url);\n    return response;\n};\n\nconst getMovieReviews = async (id) => {\n    const url = `${BASE_URL}movie/${id}/reviews?api_key=${API_KEY}&language=en-US`;\n    const response = await axios.get(url);\n    return response;\n};\n\n\n\nexport { getTrendingMovies, getMoviesByName, getMovieById, getMovieCast, getMovieReviews, IMAGES_BASE_URL };  ","import styled from 'styled-components';\n\nexport const FilmInfoWrapper = styled.div`\n    display: flex;\n`","import { useRef } from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { FilmInfoWrapper } from \"./MovieDetails.styled\";\nimport PropTypes from 'prop-types';\n\nexport default function MovieDetails({ filmId, posterUrl, filmTitle, score, overview, genres }) {\n    const location = useLocation();\n    const previouseLocation = useRef( location.state?.from ?? \"/movies\" );\n\n    return (\n        <div>\n            <Link to={previouseLocation.current} >Go back</Link>\n            <FilmInfoWrapper>\n                <img src={posterUrl} alt=\"poster\" />\n                <div>\n                    <h1>{filmTitle}</h1>\n                    <p>User score: {score} </p>\n                    <h2>Overview</h2>\n                    <p>{overview}</p>\n                    <h3>Genres</h3>\n                    <p>{genres}</p>\n                </div>\n            </FilmInfoWrapper>\n            <p>Additional information</p>\n            <ul>\n                <li><Link to={`/movies/${filmId}/cast`} state={{ from: previouseLocation}} >Cast</Link></li>\n                <li><Link to={`/movies/${filmId}/reviews`} state={{ from: previouseLocation}} >Reviews</Link></li>\n            </ul>            \n        </div>\n    )\n};\n\nMovieDetails.propTypes = {\n    filmId: PropTypes.string.isRequired,\n    posterUrl: PropTypes.string.isRequired,\n    filmTitle: PropTypes.string.isRequired,\n    score: PropTypes.string.isRequired,\n    overview: PropTypes.string.isRequired,\n    genres: PropTypes.string.isRequired\n};\n\n","import { getMovieById } from \"api/moviesAPI\";\nimport { useState, useEffect, Suspense } from \"react\";\nimport { Outlet, useParams } from \"react-router-dom\";\nimport { IMAGES_BASE_URL } from \"api/moviesAPI\";\nimport MovieDetails from \"components/MovieDetails/MovieDetails\";\n\n\nexport default function SingleMoviePage() {\n    \n    const [movie, setMovie] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const {id} = useParams();\n    \n    useEffect(() => {\n        const fetchMovieDetails = () => {\n            setIsLoading(true);\n\n            getMovieById(id)\n                .then(({ data }) => {\n                    setMovie(data);\n                })\n                .catch(newError => {\n                    setError(newError.message);\n                })\n                .finally(setIsLoading(false));\n        }\n        fetchMovieDetails();\n    }, [id]);\n\n    return (\n        <>\n            {isLoading && <p>Loading...</p>}\n            {error && <p>Ops, something whent wrong...</p>}\n\n            {movie && <MovieDetails filmId={id} posterUrl={IMAGES_BASE_URL + movie.poster_path} filmTitle={movie.title} score={Math.round(movie.vote_average * 10) + '%'} overview={movie.overview} genres={movie.genres.map(genre => genre.name).toString()} />}\n            <Suspense fallback={<div>Loading subpage...</div>}>\n                <Outlet />\n            </Suspense>            \n        </>\n    )\n}\n"],"names":["BASE_URL","API_KEY","IMAGES_BASE_URL","getTrendingMovies","url","axios","response","getMoviesByName","query","getMovieById","id","getMovieCast","getMovieReviews","FilmInfoWrapper","styled","MovieDetails","filmId","posterUrl","filmTitle","score","overview","genres","location","useLocation","previouseLocation","useRef","state","from","to","current","src","alt","SingleMoviePage","useState","movie","setMovie","isLoading","setIsLoading","error","setError","useParams","useEffect","then","data","catch","newError","message","finally","poster_path","title","Math","round","vote_average","map","genre","name","toString","Suspense","fallback"],"sourceRoot":""}